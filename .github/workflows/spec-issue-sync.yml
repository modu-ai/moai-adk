name: üìã SPEC Issue Sync

# Automatically synchronize SPEC documents to GitHub Issues
# Triggered when SPEC files are created or modified in feature/SPEC-* branches

on:
  push:
    paths:
      - '.moai/specs/SPEC-*/spec.md'
    branches:
      - 'feature/SPEC-*'
      - 'develop'
  pull_request:
    paths:
      - '.moai/specs/SPEC-*/spec.md'
    types: [opened, synchronize]

permissions:
  issues: write
  pull-requests: write
  contents: read

jobs:
  sync-spec-issue:
    name: üîÑ Sync SPEC to GitHub Issue
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Extract SPEC metadata
        id: extract
        run: |
          # Find SPEC files that changed
          spec_dirs=$(find .moai/specs -type d -name "SPEC-*" | head -1)

          if [ -z "$spec_dirs" ]; then
            echo "No SPEC directories found"
            exit 0
          fi

          spec_file="$spec_dirs/spec.md"

          if [ ! -f "$spec_file" ]; then
            echo "SPEC file not found: $spec_file"
            exit 0
          fi

          # Extract YAML frontmatter
          spec_id=$(grep "^id:" "$spec_file" | head -1 | sed 's/^id: *//' | tr -d ' "')
          spec_version=$(grep "^version:" "$spec_file" | head -1 | sed 's/^version: *//' | tr -d ' "')
          spec_status=$(grep "^status:" "$spec_file" | head -1 | sed 's/^status: *//' | tr -d ' "')
          spec_priority=$(grep "^priority:" "$spec_file" | head -1 | sed 's/^priority: *//' | tr -d ' "')

          # Extract title (first H1 heading)
          spec_title=$(grep "^# @SPEC:" "$spec_file" | head -1 | sed 's/^# @SPEC:[^:]*: //' | tr -d ' "')

          if [ -z "$spec_id" ]; then
            echo "Could not extract SPEC ID"
            exit 0
          fi

          # Output for next steps
          echo "spec_id=$spec_id" >> $GITHUB_OUTPUT
          echo "spec_version=$spec_version" >> $GITHUB_OUTPUT
          echo "spec_status=$spec_status" >> $GITHUB_OUTPUT
          echo "spec_priority=$spec_priority" >> $GITHUB_OUTPUT
          echo "spec_title=$spec_title" >> $GITHUB_OUTPUT
          echo "spec_file=$spec_file" >> $GITHUB_OUTPUT

          echo "‚úÖ Extracted SPEC metadata:"
          echo "  ID: $spec_id"
          echo "  Title: $spec_title"
          echo "  Version: $spec_version"
          echo "  Status: $spec_status"
          echo "  Priority: $spec_priority"

      - name: Check for existing issue
        if: steps.extract.outputs.spec_id
        id: check-issue
        run: |
          spec_id="${{ steps.extract.outputs.spec_id }}"
          spec_title="${{ steps.extract.outputs.spec_title }}"

          # Search for existing issue - use simpler query
          echo "Searching for existing issue with SPEC-$spec_id..."
          issue_number=$(gh issue list \
            --limit 100 \
            --json number,title \
            --jq ".[] | select(.title | contains(\"SPEC-$spec_id\")) | .number" 2>/dev/null | head -1 || echo "")

          if [ -z "$issue_number" ] || [ "$issue_number" = "null" ]; then
            echo "issue_exists=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è  No existing issue found for SPEC-$spec_id"
          else
            echo "issue_exists=true" >> $GITHUB_OUTPUT
            echo "issue_number=$issue_number" >> $GITHUB_OUTPUT
            echo "‚úÖ Found existing issue #$issue_number"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create or update GitHub Issue
        if: steps.extract.outputs.spec_id
        id: create-issue
        run: |
          spec_id="${{ steps.extract.outputs.spec_id }}"
          spec_title="${{ steps.extract.outputs.spec_title }}"
          spec_version="${{ steps.extract.outputs.spec_version }}"
          spec_status="${{ steps.extract.outputs.spec_status }}"
          spec_priority="${{ steps.extract.outputs.spec_priority }}"
          spec_file="${{ steps.extract.outputs.spec_file }}"

          # Debug: Print extracted values
          echo "Debug - Extracted values:"
          echo "  spec_id: [$spec_id]"
          echo "  spec_title: [$spec_title]"
          echo "  spec_version: [$spec_version]"
          echo "  spec_status: [$spec_status]"
          echo "  spec_priority: [$spec_priority]"
          echo "  spec_file: [$spec_file]"

          # Read SPEC content
          spec_content=$(cat "$spec_file" | tail -n +7)  # Skip YAML frontmatter

          # Prepare issue body
          issue_body="## SPEC Metadata

| Field | Value |
|-------|-------|
| **ID** | SPEC-$spec_id |
| **Version** | $spec_version |
| **Status** | $spec_status |
| **Priority** | $spec_priority |

## SPEC Document

$spec_content

---

üìé **Linked Branch**: \`feature/SPEC-$spec_id\`
üîó **Related PR**: Check pull requests for this SPEC
üìù **Auto-synced**: This issue is automatically synchronized from the SPEC document
"

          # Check if issue exists
          issue_exists="${{ steps.check-issue.outputs.issue_exists }}"
          echo "Debug - issue_exists: [$issue_exists]"
          if [ "$issue_exists" = "true" ]; then
            # Update existing issue
            issue_num="${{ steps.check-issue.outputs.issue_number }}"
            gh issue edit "$issue_num" \
              --title "[SPEC-$spec_id] $spec_title (v$spec_version)" \
              --body "$issue_body" \
              2>&1 || echo "‚ö†Ô∏è Failed to update issue #$issue_num"

            echo "issue_number=$issue_num" >> $GITHUB_OUTPUT
            echo "‚úÖ Updated issue #$issue_num"
          else
            # Create new issue
            issue_output=$(gh issue create \
              --title "[SPEC-$spec_id] $spec_title (v$spec_version)" \
              --body "$issue_body" \
              --label "spec,planning" \
              --label "$spec_priority" \
              2>&1)

            issue_num=$(echo "$issue_output" | grep -oP 'github.com/[^/]+/[^/]+/issues/\K[0-9]+' || echo "")

            if [ -z "$issue_num" ]; then
              # Fallback: extract from output
              issue_num=$(echo "$issue_output" | tail -1 | grep -oP '/issues/\K[0-9]+' || echo "")
            fi

            if [ -z "$issue_num" ]; then
              echo "‚ö†Ô∏è Could not extract issue number from output"
              echo "issue_output=$issue_output" >> $GITHUB_OUTPUT
            else
              echo "issue_number=$issue_num" >> $GITHUB_OUTPUT
              echo "‚úÖ Created issue #$issue_num"
            fi
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Add PR comment (if in PR)
        if: github.event_name == 'pull_request' && steps.create-issue.outputs.issue_number
        run: |
          issue_num="${{ steps.create-issue.outputs.issue_number }}"
          spec_id="${{ steps.extract.outputs.spec_id }}"

          pr_comment="‚úÖ **SPEC GitHub Issue Created**

This SPEC has been synchronized to GitHub Issue #$issue_num.

üìã **Issue**: [SPEC-$spec_id: ${{ steps.extract.outputs.spec_title }}](../../issues/$issue_num)
üîó **SPEC File**: \`.moai/specs/SPEC-$spec_id/spec.md\`

The issue will be automatically updated as you modify the SPEC document."

          gh pr comment ${{ github.event.pull_request.number }} \
            --body "$pr_comment" 2>&1 || echo "‚ö†Ô∏è Failed to add PR comment"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Report results
        if: steps.extract.outputs.spec_id
        run: |
          spec_id="${{ steps.extract.outputs.spec_id }}"
          issue_num="${{ steps.create-issue.outputs.issue_number }}"

          if [ -n "$issue_num" ] && [ "$issue_num" != "null" ]; then
            echo "‚úÖ SPEC Issue Sync Complete"
            echo "  - SPEC ID: SPEC-$spec_id"
            echo "  - Issue #: $issue_num"
            echo "  - URL: https://github.com/${{ github.repository }}/issues/$issue_num"
          else
            echo "‚ö†Ô∏è SPEC Issue Sync Skipped or Failed"
            echo "  - Could not create/update issue"
          fi
