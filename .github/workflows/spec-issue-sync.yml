name: üìã SPEC Issue Sync

on:
  pull_request:
    paths:
      - '.moai/specs/SPEC-*/spec.md'
    types: [opened, synchronize, reopened]

permissions:
  issues: write
  pull-requests: write
  contents: read

jobs:
  sync-spec-to-issue:
    runs-on: ubuntu-latest
    name: üîÑ Sync SPEC to GitHub Issue

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract SPEC metadata
        id: extract
        run: |
          #!/bin/bash
          set -e

          echo "::group::SPEC Extraction"

          # Find SPEC file
          SPEC_FILE=$(find .moai/specs -name "spec.md" -type f | head -1)

          if [ -z "$SPEC_FILE" ]; then
            echo "‚ùå No SPEC file found"
            exit 0
          fi

          echo "‚úÖ Found SPEC file: $SPEC_FILE"

          # Extract YAML frontmatter values
          SPEC_ID=$(grep "^id:" "$SPEC_FILE" | sed 's/^id: *//' | xargs)
          SPEC_VERSION=$(grep "^version:" "$SPEC_FILE" | sed 's/^version: *//' | xargs)
          SPEC_STATUS=$(grep "^status:" "$SPEC_FILE" | sed 's/^status: *//' | xargs)
          SPEC_PRIORITY=$(grep "^priority:" "$SPEC_FILE" | sed 's/^priority: *//' | xargs)

          # Extract title from H1 heading
          SPEC_TITLE=$(grep "^# @SPEC:" "$SPEC_FILE" | sed 's/^# @SPEC:[^:]*: *//' | xargs)

          # Validate extraction
          if [ -z "$SPEC_ID" ]; then
            echo "‚ùå Failed to extract SPEC_ID"
            exit 0
          fi

          echo "Extracted metadata:"
          echo "  ID: $SPEC_ID"
          echo "  Title: $SPEC_TITLE"
          echo "  Version: $SPEC_VERSION"
          echo "  Status: $SPEC_STATUS"
          echo "  Priority: $SPEC_PRIORITY"

          # Set outputs for next steps
          echo "spec_file=$SPEC_FILE" >> "$GITHUB_OUTPUT"
          echo "spec_id=$SPEC_ID" >> "$GITHUB_OUTPUT"
          echo "spec_version=$SPEC_VERSION" >> "$GITHUB_OUTPUT"
          echo "spec_status=$SPEC_STATUS" >> "$GITHUB_OUTPUT"
          echo "spec_priority=$SPEC_PRIORITY" >> "$GITHUB_OUTPUT"
          echo "spec_title=$SPEC_TITLE" >> "$GITHUB_OUTPUT"

          echo "::endgroup::"

      - name: Create GitHub Issue
        if: steps.extract.outputs.spec_id
        id: create-issue
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
        run: |
          #!/bin/bash
          set -e

          echo "::group::Create GitHub Issue"

          SPEC_FILE="${{ steps.extract.outputs.spec_file }}"
          SPEC_ID="${{ steps.extract.outputs.spec_id }}"
          SPEC_VERSION="${{ steps.extract.outputs.spec_version }}"
          SPEC_STATUS="${{ steps.extract.outputs.spec_status }}"
          SPEC_PRIORITY="${{ steps.extract.outputs.spec_priority }}"
          SPEC_TITLE="${{ steps.extract.outputs.spec_title }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"

          echo "Creating issue with:"
          echo "  Title: [$SPEC_ID] $SPEC_TITLE (v$SPEC_VERSION)"
          echo "  Priority: $SPEC_PRIORITY"
          echo "  PR: #$PR_NUMBER"

          # Read SPEC content (skip YAML frontmatter)
          SPEC_CONTENT=$(tail -n +7 "$SPEC_FILE")

          # Create issue body
          ISSUE_BODY="## SPEC Metadata

| Field | Value |
|-------|-------|
| **ID** | SPEC-$SPEC_ID |
| **Version** | $SPEC_VERSION |
| **Status** | $SPEC_STATUS |
| **Priority** | $SPEC_PRIORITY |

## SPEC Document

$SPEC_CONTENT

---

üìé **Branch**: \`feature/SPEC-$SPEC_ID\`
üîó **PR**: #$PR_NUMBER
üìù **Auto-synced**: This issue is automatically synchronized from the SPEC document"

          # Create issue
          ISSUE_URL=$(gh issue create \
            --title "[SPEC-$SPEC_ID] $SPEC_TITLE (v$SPEC_VERSION)" \
            --body "$ISSUE_BODY" \
            --label "spec" \
            --label "planning" \
            --label "$SPEC_PRIORITY" \
            --repo "$GH_REPO")

          if [ $? -eq 0 ]; then
            echo "‚úÖ Issue created: $ISSUE_URL"

            # Extract issue number from URL
            ISSUE_NUM=$(echo "$ISSUE_URL" | grep -oP 'issues/\K[0-9]+')
            echo "issue_number=$ISSUE_NUM" >> "$GITHUB_OUTPUT"
            echo "issue_url=$ISSUE_URL" >> "$GITHUB_OUTPUT"
          else
            echo "‚ùå Failed to create issue"
            echo "Response: $ISSUE_URL"
          fi

          echo "::endgroup::"

      - name: Add PR comment with issue link
        if: steps.create-issue.outputs.issue_number
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
        run: |
          #!/bin/bash
          set -e

          echo "::group::Add PR Comment"

          ISSUE_NUM="${{ steps.create-issue.outputs.issue_number }}"
          SPEC_ID="${{ steps.extract.outputs.spec_id }}"
          SPEC_TITLE="${{ steps.extract.outputs.spec_title }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"

          PR_COMMENT="‚úÖ **SPEC GitHub Issue Created**

This SPEC has been automatically synchronized to a GitHub Issue.

üìã **Issue**: [#$ISSUE_NUM - SPEC-$SPEC_ID: $SPEC_TITLE](../issues/$ISSUE_NUM)
üîó **SPEC File**: \`.moai/specs/SPEC-$SPEC_ID/spec.md\`

The issue will be automatically updated as you modify the SPEC document."

          gh pr comment "$PR_NUMBER" \
            --body "$PR_COMMENT" \
            --repo "$GH_REPO"

          echo "‚úÖ PR comment added"
          echo "::endgroup::"
