name: üìã SPEC Issue Sync

on:
  pull_request:
    paths:
      - '.moai/specs/SPEC-*/spec.md'
    types: [opened, synchronize, reopened]

permissions:
  issues: write
  pull-requests: write
  contents: read

jobs:
  sync-spec-to-issue:
    runs-on: ubuntu-latest
    name: üîÑ Sync SPEC to GitHub Issue

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Find and parse SPEC file
        id: spec
        run: |
          import os
          import re
          from pathlib import Path

          # Find SPEC files
          spec_files = list(Path(".moai/specs").glob("SPEC-*/spec.md"))

          if not spec_files:
            print("No SPEC files found")
            exit(0)

          spec_file = str(spec_files[0])
          print(f"Found SPEC file: {spec_file}")

          # Read and parse SPEC
          with open(spec_file, 'r', encoding='utf-8') as f:
            content = f.read()

          # Extract YAML frontmatter
          yaml_match = re.search(r'^---(.*?)---', content, re.DOTALL)
          if not yaml_match:
            print("No YAML frontmatter found")
            exit(0)

          yaml_content = yaml_match.group(1)

          # Extract metadata
          metadata = {}
          for line in yaml_content.split('\n'):
            match = re.match(r'^(\w+):\s*(.+)$', line.strip())
            if match:
              metadata[match.group(1)] = match.group(2).strip('"').strip()

          spec_id = metadata.get('id', '')
          spec_version = metadata.get('version', '')
          spec_status = metadata.get('status', '')
          spec_priority = metadata.get('priority', '')

          # Extract title from H1 heading
          title_match = re.search(r'^# @SPEC:[^:]*:\s*(.+)$', content, re.MULTILINE)
          spec_title = title_match.group(1) if title_match else ''

          print(f"SPEC ID: {spec_id}")
          print(f"Title: {spec_title}")
          print(f"Version: {spec_version}")
          print(f"Status: {spec_status}")
          print(f"Priority: {spec_priority}")

          # Output for next steps
          print(f"::set-output name=spec_file::{spec_file}")
          print(f"::set-output name=spec_id::{spec_id}")
          print(f"::set-output name=spec_version::{spec_version}")
          print(f"::set-output name=spec_status::{spec_status}")
          print(f"::set-output name=spec_priority::{spec_priority}")
          print(f"::set-output name=spec_title::{spec_title}")

        shell: python

      - name: Create GitHub Issue
        if: steps.spec.outputs.spec_id
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SPEC_FILE: ${{ steps.spec.outputs.spec_file }}
          SPEC_ID: ${{ steps.spec.outputs.spec_id }}
          SPEC_VERSION: ${{ steps.spec.outputs.spec_version }}
          SPEC_STATUS: ${{ steps.spec.outputs.spec_status }}
          SPEC_PRIORITY: ${{ steps.spec.outputs.spec_priority }}
          SPEC_TITLE: ${{ steps.spec.outputs.spec_title }}
        run: |
          import os
          import subprocess

          spec_file = os.environ['SPEC_FILE']
          spec_id = os.environ['SPEC_ID']
          spec_version = os.environ['SPEC_VERSION']
          spec_status = os.environ['SPEC_STATUS']
          spec_priority = os.environ['SPEC_PRIORITY']
          spec_title = os.environ['SPEC_TITLE']

          # Read SPEC content
          with open(spec_file, 'r', encoding='utf-8') as f:
            content = f.read()

          # Skip frontmatter
          lines = content.split('\n')
          body_start = 0
          dash_count = 0
          for i, line in enumerate(lines):
            if line.strip() == '---':
              dash_count += 1
              if dash_count == 2:
                body_start = i + 1
                break

          spec_content = '\n'.join(lines[body_start:])

          # Build issue body
          issue_body = f"""## SPEC Metadata

| Field | Value |
|-------|-------|
| **ID** | SPEC-{spec_id} |
| **Version** | {spec_version} |
| **Status** | {spec_status} |
| **Priority** | {spec_priority} |

## SPEC Document

{spec_content}

---

üìé **Branch**: `feature/SPEC-{spec_id}`
üîó **PR**: #{os.environ.get('GITHUB_EVENT_NUMBER', 'N/A')}
üìù **Auto-synced**: This issue is automatically synchronized from the SPEC document
"""

          # Create issue
          result = subprocess.run(
            ['gh', 'issue', 'create',
             '--title', f'[SPEC-{spec_id}] {spec_title} (v{spec_version})',
             '--body', issue_body,
             '--label', 'spec',
             '--label', 'planning',
             '--label', spec_priority],
            capture_output=True,
            text=True
          )

          if result.returncode == 0:
            print("‚úÖ Issue created successfully")
            # Extract issue number from URL
            import re
            match = re.search(r'issues/(\d+)', result.stdout)
            if match:
              issue_num = match.group(1)
              print(f"::set-output name=issue_number::{issue_num}")
              print(f"Issue URL: {result.stdout}")
          else:
            print(f"‚ùå Failed to create issue: {result.stderr}")
            exit(1)

        shell: python

      - name: Add PR comment
        if: steps.create-issue.outputs.issue_number
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUM: ${{ steps.create-issue.outputs.issue_number }}
          SPEC_ID: ${{ steps.spec.outputs.spec_id }}
          SPEC_TITLE: ${{ steps.spec.outputs.spec_title }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          import os
          import subprocess

          issue_num = os.environ['ISSUE_NUM']
          spec_id = os.environ['SPEC_ID']
          spec_title = os.environ['SPEC_TITLE']
          pr_number = os.environ['PR_NUMBER']

          pr_comment = f"""‚úÖ **SPEC GitHub Issue Created**

This SPEC has been synchronized to GitHub Issue.

üìã **Issue**: [#{{issue_num}} - SPEC-{{spec_id}}: {{spec_title}}](../issues/{{issue_num}})
üîó **SPEC File**: `.moai/specs/SPEC-{{spec_id}}/spec.md`

The issue will be automatically updated as you modify the SPEC document."""

          result = subprocess.run(
            ['gh', 'pr', 'comment', pr_number, '--body', pr_comment],
            capture_output=True,
            text=True
          )

          if result.returncode == 0:
            print("‚úÖ PR comment added successfully")
          else:
            print(f"‚ö†Ô∏è Failed to add PR comment: {result.stderr}")

        shell: python
