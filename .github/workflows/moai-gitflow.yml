name: MoAI-ADK GitFlow 자동화

# MoAI-ADK  3단계 파이프라인: spec → build → sync
# GitFlow 완전 투명성 - 개발자가 Git을 몰라도 되는 자동화

on:
  push:
    branches: [develop, "feature/**"]
  pull_request:
    types: [opened, ready_for_review, converted_to_draft]

jobs:
  moai-pipeline:
    name: 🗿 MoAI-ADK 파이프라인
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: 체크아웃
        uses: actions/checkout@v4

      - name: Python 환경 설정
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: uv 설치 (Python 패키지 관리자)
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Python 의존성 설치
        run: |
          uv pip install --system -e ".[dev]"

      - name: 템플릿 파일 존재 확인 (디버그)
        run: |
          echo "📂 Checking template files..."
          ls -la src/moai_adk/templates/.claude/ || echo "❌ .claude directory not found"
          ls -la src/moai_adk/templates/.moai/ || echo "❌ .moai directory not found"
          ls -la src/moai_adk/templates/.github/ || echo "❌ .github directory not found"

      # Multi-language toolchains (conditional)
      - name: Setup Node.js
        if: ${{ hashFiles('package.json') != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Setup Bun
        if: ${{ hashFiles('bun.lockb') != '' }}
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: "latest"

      - name: Setup Go
        if: ${{ hashFiles('go.mod') != '' }}
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"

      - name: Setup Rust
        if: ${{ hashFiles('Cargo.toml') != '' }}
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Java
        if: ${{ hashFiles('pom.xml') != '' || hashFiles('build.gradle') != '' || hashFiles('build.gradle.kts') != '' }}
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Setup .NET
        if: ${{ hashFiles('**/*.sln') != '' || hashFiles('**/*.csproj') != '' }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      # TRUST 5원칙 자동 검증
      # Note: Validation is now handled by TypeScript-based tools
      - name: 🧭 TRUST 5원칙 검증
        run: |
          echo "✅ TRUST 원칙 검증은 TypeScript 기반 도구로 수행됩니다"
          echo "   - @agent-trust-checker 사용"
          echo "   - TypeScript 훅 시스템 활용"

      - name: Run language-aware tests
        run: |
          set -e
          echo "🔎 Running language-aware tests if present"

          # Python tests (pytest)
          if [ -f "pyproject.toml" ] && grep -q "pytest" pyproject.toml; then
            echo "➡️  Python tests (pytest)"
            uv run pytest --cov --cov-report=term-missing --cov-report=xml --cov-fail-under=85
          fi

          if [ -f "package.json" ]; then
            echo "➡️  Node.js tests"
            npm ci --prefer-offline || npm install
            npm test --if-present -- --coverage || true
          fi
          if [ -f "go.mod" ]; then
            echo "➡️  Go tests"
            go test -v -cover ./... || true
          fi
          if [ -f "Cargo.toml" ]; then
            echo "➡️  Rust tests"
            cargo test --all --locked || cargo test || true
          fi
          if [ -f "pom.xml" ]; then
            echo "➡️  Java tests (Maven)"
            mvn -q -DskipTests=false test || true
          elif [ -f "build.gradle" ] || [ -f "build.gradle.kts" ]; then
            echo "➡️  Java tests (Gradle)"
            ./gradlew test || gradle test || true
          fi
          if compgen -G "**/*.sln" > /dev/null || compgen -G "**/*.csproj" > /dev/null; then
            echo "➡️  .NET tests"
            dotnet test || true
          fi

      - name: Upload coverage to Codecov
        if: ${{ hashFiles('coverage.xml') != '' }}
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          flags: unittests
          name: moai-adk-coverage
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      #  TAG 시스템 검증 (코드 파일만)
      - name: 🏷️ TAG 시스템 검증
        run: |
          echo "✅ TAG 검증은 tag_validator.py Hook에서 자동 처리됨"

      # 브랜치별 단계 실행
      - name: 📝 SPEC 단계 (feature 브랜치)
        if: startsWith(github.ref, 'refs/heads/feature/')
        run: |
          echo "🌿 Feature 브랜치: SPEC 검증 단계"
          echo "- spec-builder 에이전트가 EARS 명세 작성"
          echo "- Draft PR 자동 생성"

      - name: 🔴🟢🔄 BUILD 단계 (Draft PR)
        if: github.event.pull_request.draft == true
        run: |
          echo "📝 Draft PR: TDD 구현 단계"
          echo "- code-builder 에이전트가 RED-GREEN-REFACTOR"
          echo "- TRUST 5원칙 준수 검증"

      - name: 📚 SYNC 단계 (Ready PR)
        if: github.event.pull_request.draft == false && github.event.action == 'ready_for_review'
        run: |
          echo "✅ Ready PR: 문서 동기화 단계"
          echo "- doc-syncer 에이전트가 Living Document 동기화"
          echo "- PR 리뷰 준비 완료"

      # 최종 결과 리포트
      - name: 📊 MoAI 파이프라인 완료
        run: |
          echo "🗿 MoAI-ADK GitFlow 자동화 완료"
          echo "✨ Git을 몰라도 프로페셔널 워크플로우 구현"
