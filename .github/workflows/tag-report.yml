# @CODE:DOC-TAG-004 | Component 4: Automated TAG reporting workflow
name: TAG Report Generation

on:
  # Scheduled: Daily at 09:00 UTC
  schedule:
    - cron: '0 9 * * *'

  # Event: Push to main/develop
  push:
    branches:
      - main
      - develop

  # Manual: Workflow dispatch
  workflow_dispatch:
    inputs:
      output_format:
        description: 'Report format (all|inventory|matrix|statistics)'
        required: false
        default: 'all'

jobs:
  generate-tag-reports:
    name: Generate TAG Reports
    runs-on: ubuntu-latest

    permissions:
      contents: write  # Required to commit reports back to repo
      pull-requests: write  # Required to comment on PRs

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for accurate file modification times

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install MoAI-ADK
        run: |
          python -m pip install --upgrade pip
          pip install -e .

      - name: Create reports directory
        run: |
          mkdir -p docs/reports
          echo "Reports will be generated in docs/reports/"

      - name: Generate TAG Inventory
        run: |
          python -c "
          from moai_adk.core.tags.reporter import ReportGenerator

          generator = ReportGenerator()
          inventory = generator.generate_inventory_report('.')

          with open('docs/reports/tag-inventory.md', 'w') as f:
              f.write(inventory)

          print('‚úÖ Generated tag-inventory.md')
          "

      - name: Generate TAG Coverage Matrix
        run: |
          python -c "
          from moai_adk.core.tags.reporter import ReportGenerator

          generator = ReportGenerator()
          matrix = generator.generate_matrix_report('.')

          with open('docs/reports/tag-matrix.md', 'w') as f:
              f.write(matrix)

          print('‚úÖ Generated tag-matrix.md')
          "

      - name: Generate TAG Statistics
        run: |
          python -c "
          from moai_adk.core.tags.reporter import ReportGenerator

          generator = ReportGenerator()
          stats = generator.generate_statistics_report('.')

          with open('docs/reports/tag-statistics.json', 'w') as f:
              f.write(stats)

          print('‚úÖ Generated tag-statistics.json')
          "

      - name: Generate combined report
        run: |
          python -c "
          from moai_adk.core.tags.reporter import ReportGenerator
          from pathlib import Path
          import json

          generator = ReportGenerator()
          result = generator.generate_all_reports('.', 'docs/reports')

          if result.success:
              print(f'‚úÖ All reports generated successfully')
              print(f'   - Inventory: {result.inventory_path}')
              print(f'   - Matrix: {result.matrix_path}')
              print(f'   - Statistics: {result.statistics_path}')

              # Read statistics for summary
              stats = json.loads(result.statistics_path.read_text())
              print(f'')
              print(f'üìä Summary:')
              print(f'   - Total TAGs: {stats[\"total_tags\"]}')
              print(f'   - By Type: SPEC={stats[\"by_type\"].get(\"SPEC\", 0)}, CODE={stats[\"by_type\"].get(\"CODE\", 0)}, TEST={stats[\"by_type\"].get(\"TEST\", 0)}, DOC={stats[\"by_type\"].get(\"DOC\", 0)}')
              print(f'   - Coverage: {stats[\"coverage\"].get(\"overall_percentage\", 0)}%')
          else:
              print(f'‚ùå Report generation failed: {result.error_message}')
              exit(1)
          "

      - name: Check for changes
        id: git_status
        run: |
          if [ -n "$(git status --porcelain docs/reports/)" ]; then
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "üìù TAG reports have changed"
          else
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "‚úÖ TAG reports unchanged (no commit needed)"
          fi

      - name: Commit reports
        if: steps.git_status.outputs.changes == 'true'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add docs/reports/
          git commit -m "docs(tags): Update TAG reports [automated]

          - Updated tag-inventory.md
          - Updated tag-matrix.md
          - Updated tag-statistics.json

          Generated by: GitHub Actions workflow (tag-report.yml)
          Triggered: ${{ github.event_name }}
          Commit: ${{ github.sha }}

          ü§ñ Generated with MoAI-ADK TAG Reporting System
          "
          git push

      - name: Create GitHub Release Notes
        if: github.ref == 'refs/heads/main' && steps.git_status.outputs.changes == 'true'
        run: |
          echo "üìä TAG System Health Report" > report_summary.md
          echo "" >> report_summary.md
          echo "Generated: $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> report_summary.md
          echo "" >> report_summary.md

          # Extract key metrics from statistics
          python -c "
          import json
          from pathlib import Path

          stats = json.loads(Path('docs/reports/tag-statistics.json').read_text())

          print(f'## Summary')
          print(f'')
          print(f'- **Total TAGs**: {stats[\"total_tags\"]}')
          print(f'- **By Type**:')
          print(f'  - SPEC: {stats[\"by_type\"].get(\"SPEC\", 0)}')
          print(f'  - CODE: {stats[\"by_type\"].get(\"CODE\", 0)}')
          print(f'  - TEST: {stats[\"by_type\"].get(\"TEST\", 0)}')
          print(f'  - DOC: {stats[\"by_type\"].get(\"DOC\", 0)}')
          print(f'')
          print(f'## Coverage')
          print(f'')
          print(f'- **Overall**: {stats[\"coverage\"].get(\"overall_percentage\", 0)}%')
          print(f'- **SPEC ‚Üí CODE**: {stats[\"coverage\"].get(\"spec_to_code\", 0)}%')
          print(f'- **CODE ‚Üí TEST**: {stats[\"coverage\"].get(\"code_to_test\", 0)}%')
          print(f'')
          print(f'## Issues')
          print(f'')
          print(f'- **Orphan TAGs**: {stats[\"issues\"].get(\"orphan_count\", 0)}')
          print(f'- **Incomplete Chains**: {stats[\"issues\"].get(\"incomplete_chains\", 0)}')
          print(f'')
          print(f'## Reports')
          print(f'')
          print(f'- [TAG Inventory](./docs/reports/tag-inventory.md)')
          print(f'- [Coverage Matrix](./docs/reports/tag-matrix.md)')
          print(f'- [Statistics (JSON)](./docs/reports/tag-statistics.json)')
          " >> report_summary.md

          cat report_summary.md

      - name: Upload reports as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tag-reports-${{ github.sha }}
          path: docs/reports/
          retention-days: 90

      - name: Post summary to GitHub Actions UI
        run: |
          echo "## üìä TAG Report Generation Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          python -c "
          import json
          from pathlib import Path

          stats = json.loads(Path('docs/reports/tag-statistics.json').read_text())

          print(f'### Summary')
          print(f'')
          print(f'| Metric | Value |')
          print(f'|--------|-------|')
          print(f'| Total TAGs | {stats[\"total_tags\"]} |')
          print(f'| SPEC | {stats[\"by_type\"].get(\"SPEC\", 0)} |')
          print(f'| CODE | {stats[\"by_type\"].get(\"CODE\", 0)} |')
          print(f'| TEST | {stats[\"by_type\"].get(\"TEST\", 0)} |')
          print(f'| DOC | {stats[\"by_type\"].get(\"DOC\", 0)} |')
          print(f'| Overall Coverage | {stats[\"coverage\"].get(\"overall_percentage\", 0)}% |')
          print(f'| Orphan TAGs | {stats[\"issues\"].get(\"orphan_count\", 0)} |')
          print(f'| Incomplete Chains | {stats[\"issues\"].get(\"incomplete_chains\", 0)} |')
          print(f'')
          print(f'### Generated Files')
          print(f'')
          print(f'- ‚úÖ tag-inventory.md')
          print(f'- ‚úÖ tag-matrix.md')
          print(f'- ‚úÖ tag-statistics.json')
          " >> $GITHUB_STEP_SUMMARY

      - name: Fail workflow if issues detected (optional)
        if: always()
        run: |
          python -c "
          import json
          from pathlib import Path
          import sys

          stats = json.loads(Path('docs/reports/tag-statistics.json').read_text())

          orphan_count = stats['issues'].get('orphan_count', 0)
          incomplete_count = stats['issues'].get('incomplete_chains', 0)

          # Optional: Fail workflow if too many issues
          # Uncomment to enable strict validation
          # if orphan_count > 10 or incomplete_count > 10:
          #     print(f'‚ùå Too many TAG issues detected!')
          #     print(f'   Orphans: {orphan_count}')
          #     print(f'   Incomplete: {incomplete_count}')
          #     sys.exit(1)

          print(f'‚úÖ TAG system health check passed')
          print(f'   Orphans: {orphan_count}')
          print(f'   Incomplete: {incomplete_count}')
          "
