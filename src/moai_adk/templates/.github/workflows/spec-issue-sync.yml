name: üìã SPEC Issue Sync

on:
  pull_request:
    paths:
      - '.moai/specs/SPEC-*/spec.md'
    types: [opened, synchronize, reopened]

permissions:
  issues: write
  pull-requests: write
  contents: read

jobs:
  sync-spec-to-issue:
    runs-on: ubuntu-latest
    name: üîÑ Sync SPEC to GitHub Issue

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Find and extract SPEC
        id: extract
        run: |
          set -x  # Debug mode - show all commands

          echo "=== Starting SPEC extraction ==="

          # Find SPEC file
          SPEC_FILE=$(find .moai/specs -name "spec.md" | head -1)
          echo "Found SPEC file: $SPEC_FILE"

          if [ -z "$SPEC_FILE" ]; then
            echo "No SPEC file found"
            exit 0
          fi

          # Extract YAML frontmatter
          SPEC_ID=$(grep "^id:" "$SPEC_FILE" | sed 's/^id: *//' | xargs)
          SPEC_VERSION=$(grep "^version:" "$SPEC_FILE" | sed 's/^version: *//' | xargs)
          SPEC_STATUS=$(grep "^status:" "$SPEC_FILE" | sed 's/^status: *//' | xargs)
          SPEC_PRIORITY=$(grep "^priority:" "$SPEC_FILE" | sed 's/^priority: *//' | xargs)

          # Extract title
          SPEC_TITLE=$(grep "^# @SPEC:" "$SPEC_FILE" | sed 's/^# @SPEC:[^:]*: *//' | xargs)

          echo "=== Extracted metadata ==="
          echo "ID: $SPEC_ID"
          echo "Title: $SPEC_TITLE"
          echo "Version: $SPEC_VERSION"
          echo "Status: $SPEC_STATUS"
          echo "Priority: $SPEC_PRIORITY"

          # Save to environment
          {
            echo "spec_file=$SPEC_FILE"
            echo "spec_id=$SPEC_ID"
            echo "spec_version=$SPEC_VERSION"
            echo "spec_status=$SPEC_STATUS"
            echo "spec_priority=$SPEC_PRIORITY"
            echo "spec_title=$SPEC_TITLE"
          } >> $GITHUB_OUTPUT

          echo "=== Outputs saved ==="

      - name: Create GitHub Issue
        if: steps.extract.outputs.spec_id != ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -x

          echo "=== Creating GitHub Issue ==="

          SPEC_FILE="${{ steps.extract.outputs.spec_file }}"
          SPEC_ID="${{ steps.extract.outputs.spec_id }}"
          SPEC_VERSION="${{ steps.extract.outputs.spec_version }}"
          SPEC_STATUS="${{ steps.extract.outputs.spec_status }}"
          SPEC_PRIORITY="${{ steps.extract.outputs.spec_priority }}"
          SPEC_TITLE="${{ steps.extract.outputs.spec_title }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"

          echo "Variables received:"
          echo "  SPEC_FILE=$SPEC_FILE"
          echo "  SPEC_ID=$SPEC_ID"
          echo "  SPEC_TITLE=$SPEC_TITLE"
          echo "  PR_NUMBER=$PR_NUMBER"

          # Read SPEC content (skip first 6 lines of YAML)
          SPEC_CONTENT=$(tail -n +7 "$SPEC_FILE")

          # Create issue body
          ISSUE_BODY="## SPEC Metadata
| Field | Value |
|-------|-------|
| **ID** | SPEC-$SPEC_ID |
| **Version** | $SPEC_VERSION |
| **Status** | $SPEC_STATUS |
| **Priority** | $SPEC_PRIORITY |

## SPEC Document

$SPEC_CONTENT

---

üìé **Branch**: \`feature/SPEC-$SPEC_ID\`
üîó **PR**: #$PR_NUMBER
üìù **Auto-synced**: This issue is automatically synchronized from the SPEC document"

          echo "=== Issue body prepared ==="
          echo "Body length: ${#ISSUE_BODY}"

          # Create issue
          echo "Creating issue with gh CLI..."
          ISSUE_OUTPUT=$(gh issue create \
            --title "[SPEC-$SPEC_ID] $SPEC_TITLE (v$SPEC_VERSION)" \
            --body "$ISSUE_BODY" \
            --label "spec" \
            --label "planning" \
            --label "$SPEC_PRIORITY" 2>&1)

          ISSUE_EXIT_CODE=$?
          echo "gh issue create exit code: $ISSUE_EXIT_CODE"
          echo "Issue output: $ISSUE_OUTPUT"

          if [ $ISSUE_EXIT_CODE -eq 0 ]; then
            echo "‚úÖ Issue created successfully"
            # Extract issue number
            ISSUE_NUM=$(echo "$ISSUE_OUTPUT" | grep -oP 'issues/\K[0-9]+' || echo "")
            echo "Issue number: $ISSUE_NUM"

            if [ -n "$ISSUE_NUM" ]; then
              echo "issue_number=$ISSUE_NUM" >> $GITHUB_OUTPUT
            fi
          else
            echo "‚ùå Failed to create issue"
            exit 0  # Don't fail PR, just skip issue creation
          fi

      - name: Add PR comment
        if: steps.create-issue.outputs.issue_number != ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -x

          ISSUE_NUM="${{ steps.create-issue.outputs.issue_number }}"
          SPEC_ID="${{ steps.extract.outputs.spec_id }}"
          SPEC_TITLE="${{ steps.extract.outputs.spec_title }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"

          echo "=== Adding PR comment ==="
          echo "Issue: #$ISSUE_NUM"
          echo "PR: #$PR_NUMBER"

          PR_COMMENT="‚úÖ **SPEC GitHub Issue Created**

This SPEC has been synchronized to GitHub Issue.

üìã **Issue**: [#$ISSUE_NUM - SPEC-$SPEC_ID: $SPEC_TITLE](../issues/$ISSUE_NUM)
üîó **SPEC File**: \`.moai/specs/SPEC-$SPEC_ID/spec.md\`

The issue will be automatically updated as you modify the SPEC document."

          gh pr comment $PR_NUMBER --body "$PR_COMMENT" || true
          echo "PR comment added"
