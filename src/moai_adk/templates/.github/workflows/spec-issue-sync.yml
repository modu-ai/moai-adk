name: 📋 SPEC Issue Sync

on:
  pull_request:
    paths:
      - '.moai/specs/SPEC-*/spec.md'
    types: [opened, synchronize]

permissions:
  issues: write
  pull-requests: write
  contents: read

jobs:
  sync-spec-to-issue:
    runs-on: ubuntu-latest
    name: 🔄 Sync SPEC to GitHub Issue

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Find and parse SPEC file
        id: spec
        run: |
          # Find SPEC files in the PR
          spec_file=$(find .moai/specs -name "spec.md" -type f | head -1)

          if [ -z "$spec_file" ]; then
            echo "No SPEC file found"
            exit 0
          fi

          echo "spec_file=$spec_file" >> $GITHUB_OUTPUT

          # Extract YAML metadata using grep
          spec_id=$(grep "^id:" "$spec_file" | sed 's/^id: *//' | tr -d ' "')
          spec_version=$(grep "^version:" "$spec_file" | sed 's/^version: *//' | tr -d ' "')
          spec_status=$(grep "^status:" "$spec_file" | sed 's/^status: *//' | tr -d ' "')
          spec_priority=$(grep "^priority:" "$spec_file" | sed 's/^priority: *//' | tr -d ' "')

          # Extract title from H1 heading
          spec_title=$(grep "^# @SPEC:" "$spec_file" | sed 's/^# @SPEC:[^:]*: //')

          echo "ID: $spec_id | Version: $spec_version | Status: $spec_status | Priority: $spec_priority"
          echo "Title: $spec_title"

          echo "spec_id=$spec_id" >> $GITHUB_OUTPUT
          echo "spec_version=$spec_version" >> $GITHUB_OUTPUT
          echo "spec_status=$spec_status" >> $GITHUB_OUTPUT
          echo "spec_priority=$spec_priority" >> $GITHUB_OUTPUT
          echo "spec_title=$spec_title" >> $GITHUB_OUTPUT

      - name: Prepare issue body
        if: steps.spec.outputs.spec_id
        id: body
        run: |
          spec_file="${{ steps.spec.outputs.spec_file }}"
          spec_id="${{ steps.spec.outputs.spec_id }}"
          spec_version="${{ steps.spec.outputs.spec_version }}"
          spec_status="${{ steps.spec.outputs.spec_status }}"
          spec_priority="${{ steps.spec.outputs.spec_priority }}"

          # Read SPEC content (skip YAML frontmatter = first 6 lines)
          spec_content=$(tail -n +7 "$spec_file")

          # Create issue body
          issue_body="## SPEC Metadata
| Field | Value |
|-------|-------|
| **ID** | SPEC-$spec_id |
| **Version** | $spec_version |
| **Status** | $spec_status |
| **Priority** | $spec_priority |

## SPEC Document

$spec_content

---

📎 **Branch**: \`feature/SPEC-$spec_id\`
🔗 **PR**: #${{ github.event.pull_request.number }}
📝 **Auto-synced**: This issue is automatically synchronized from the SPEC document
"

          # Save to file for next step
          cat > /tmp/issue_body.txt <<'ISSUE_EOF'
$issue_body
ISSUE_EOF

      - name: Create GitHub Issue
        if: steps.spec.outputs.spec_id
        id: create-issue
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          spec_id="${{ steps.spec.outputs.spec_id }}"
          spec_version="${{ steps.spec.outputs.spec_version }}"
          spec_title="${{ steps.spec.outputs.spec_title }}"
          spec_priority="${{ steps.spec.outputs.spec_priority }}"
          spec_file="${{ steps.spec.outputs.spec_file }}"

          # Read issue body
          spec_content=$(tail -n +7 "$spec_file")

          issue_body="## SPEC Metadata
| Field | Value |
|-------|-------|
| **ID** | SPEC-$spec_id |
| **Version** | $spec_version |
| **Status** | ${{ steps.spec.outputs.spec_status }} |
| **Priority** | $spec_priority |

## SPEC Document

$spec_content

---

📎 **Branch**: \`feature/SPEC-$spec_id\`
🔗 **PR**: #${{ github.event.pull_request.number }}
📝 **Auto-synced**: This issue is automatically synchronized from the SPEC document"

          # Create issue with labels
          gh issue create \
            --title "[SPEC-$spec_id] $spec_title (v$spec_version)" \
            --body "$issue_body" \
            --label "spec" \
            --label "planning" \
            --label "$spec_priority" 2>&1 | tee /tmp/issue_output.txt

          # Extract issue number from output
          issue_num=$(grep -oP 'github.com/[^/]+/[^/]+/issues/\K[0-9]+' /tmp/issue_output.txt || echo "")

          if [ -z "$issue_num" ]; then
            echo "Could not extract issue number from output"
            cat /tmp/issue_output.txt
            exit 1
          fi

          echo "issue_number=$issue_num" >> $GITHUB_OUTPUT
          echo "✅ Created issue #$issue_num"

      - name: Add PR comment
        if: steps.create-issue.outputs.issue_number
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          issue_num="${{ steps.create-issue.outputs.issue_number }}"
          spec_id="${{ steps.spec.outputs.spec_id }}"
          spec_title="${{ steps.spec.outputs.spec_title }}"

          pr_comment="✅ **SPEC GitHub Issue Created**

This SPEC has been synchronized to GitHub Issue.

📋 **Issue**: [#$issue_num - SPEC-$spec_id: $spec_title](../issues/$issue_num)
🔗 **SPEC File**: \`.moai/specs/SPEC-$spec_id/spec.md\`

The issue will be automatically updated as you modify the SPEC document."

          gh pr comment ${{ github.event.pull_request.number }} --body "$pr_comment"
