name: 📋 SPEC Issue Sync

on:
  pull_request:
    paths:
      - '.moai/specs/SPEC-*/spec.md'
    types: [opened, synchronize]

permissions:
  issues: write
  pull-requests: write
  contents: read

jobs:
  sync-spec-to-issue:
    runs-on: ubuntu-latest
    name: 🔄 Sync SPEC to GitHub Issue

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Find and parse SPEC file
        id: spec
        run: |
          set -x  # Enable debug mode

          # Debug: Show current directory and files
          echo "=== Debug: Current directory ==="
          pwd
          ls -la

          echo "=== Debug: Looking for .moai/specs ==="
          ls -la .moai/ 2>&1 || echo ".moai/ directory not found"

          # Find SPEC files in the PR
          echo "=== Debug: Searching for SPEC files ==="
          find . -name "spec.md" -type f 2>&1 || echo "find command failed"

          spec_file=$(find .moai/specs -name "spec.md" -type f 2>&1 | head -1)
          echo "Found spec_file: [$spec_file]"

          if [ -z "$spec_file" ]; then
            echo "⚠️  No SPEC file found in .moai/specs"
            echo "Exiting gracefully (this is expected if no SPEC files changed)"
            exit 0
          fi

          echo "✅ Found SPEC file: $spec_file"
          echo "spec_file=$spec_file" >> $GITHUB_OUTPUT

          # Extract YAML metadata using grep
          spec_id=$(grep "^id:" "$spec_file" | sed 's/^id: *//' | tr -d ' "')
          spec_version=$(grep "^version:" "$spec_file" | sed 's/^version: *//' | tr -d ' "')
          spec_status=$(grep "^status:" "$spec_file" | sed 's/^status: *//' | tr -d ' "')
          spec_priority=$(grep "^priority:" "$spec_file" | sed 's/^priority: *//' | tr -d ' "')

          # Extract title from H1 heading
          spec_title=$(grep "^# @SPEC:" "$spec_file" | sed 's/^# @SPEC:[^:]*: //')

          echo "✅ Extracted SPEC metadata:"
          echo "  ID: $spec_id"
          echo "  Title: $spec_title"
          echo "  Version: $spec_version"
          echo "  Status: $spec_status"
          echo "  Priority: $spec_priority"

          echo "spec_id=$spec_id" >> $GITHUB_OUTPUT
          echo "spec_version=$spec_version" >> $GITHUB_OUTPUT
          echo "spec_status=$spec_status" >> $GITHUB_OUTPUT
          echo "spec_priority=$spec_priority" >> $GITHUB_OUTPUT
          echo "spec_title=$spec_title" >> $GITHUB_OUTPUT

      - name: Create GitHub Issue
        if: steps.spec.outputs.spec_id
        id: create-issue
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          spec_id="${{ steps.spec.outputs.spec_id }}"
          spec_version="${{ steps.spec.outputs.spec_version }}"
          spec_title="${{ steps.spec.outputs.spec_title }}"
          spec_status="${{ steps.spec.outputs.spec_status }}"
          spec_priority="${{ steps.spec.outputs.spec_priority }}"
          spec_file="${{ steps.spec.outputs.spec_file }}"

          # Read SPEC content (skip YAML frontmatter: 9 lines + 1 blank = 10 lines total)
          # Start reading from line 11
          spec_content=$(tail -n +11 "$spec_file")

          # Prepare issue body
          issue_body="## SPEC Metadata

| Field | Value |
|-------|-------|
| **ID** | $spec_id |
| **Version** | $spec_version |
| **Status** | $spec_status |
| **Priority** | $spec_priority |

## SPEC Document

$spec_content

---

📎 **Branch**: \`feature/$spec_id\`
🔗 **PR**: #${{ github.event.pull_request.number }}
📝 **Auto-synced**: This issue is automatically synchronized from the SPEC document"

          echo "📋 Creating GitHub Issue..."
          echo "  Title: [SPEC-$spec_id] $spec_title (v$spec_version)"
          echo "  Body length: ${#issue_body} characters"

          # Save issue body to file for safe gh CLI usage
          echo "$issue_body" > /tmp/issue_body.txt

          # Create issue with labels using body-file
          issue_output=$(gh issue create \
            --title "[SPEC-$spec_id] $spec_title (v$spec_version)" \
            --body-file /tmp/issue_body.txt \
            --label "spec" \
            --label "planning" \
            --label "$spec_priority" 2>&1)

          echo "$issue_output" | tee /tmp/issue_output.txt

          # Extract issue number from output
          issue_num=$(echo "$issue_output" | grep -oE '/issues/[0-9]+' | grep -oE '[0-9]+' | head -1)

          if [ -z "$issue_num" ]; then
            echo "⚠️  Could not extract issue number from output"
            echo "Full output:"
            cat /tmp/issue_output.txt
            exit 1
          fi

          echo "issue_number=$issue_num" >> $GITHUB_OUTPUT
          echo "✅ Created issue #$issue_num"

      - name: Add PR comment
        if: steps.create-issue.outputs.issue_number
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          issue_num="${{ steps.create-issue.outputs.issue_number }}"
          spec_id="${{ steps.spec.outputs.spec_id }}"
          spec_title="${{ steps.spec.outputs.spec_title }}"

          pr_comment="✅ **SPEC GitHub Issue Created**

This SPEC has been synchronized to GitHub Issue.

📋 **Issue**: [#$issue_num - SPEC-$spec_id: $spec_title](../issues/$issue_num)
🔗 **SPEC File**: \`.moai/specs/SPEC-$spec_id/spec.md\`

The issue will be automatically updated as you modify the SPEC document."

          gh pr comment ${{ github.event.pull_request.number }} --body "$pr_comment"
          echo "✅ Added PR comment linking to issue #$issue_num"
