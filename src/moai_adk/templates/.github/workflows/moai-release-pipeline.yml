name: MoAI GitFlow Release Pipeline

# main 브랜치에 릴리즈 커밋(🔖 RELEASE:)이 푸시될 때 자동으로 실행
on:
  push:
    branches:
      - main
    # 릴리즈 커밋만 필터 (RELEASE 패턴)
    paths-ignore:
      - "docs/**"
      - "README.md"
      - ".gitignore"

jobs:
  detect-release:
    name: 🔍 Detect Release Commit
    runs-on: ubuntu-latest
    outputs:
      is_release: ${{ steps.detect.outputs.is_release }}
      version: ${{ steps.detect.outputs.version }}
      release_notes: ${{ steps.detect.outputs.release_notes }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Detect release commit
        id: detect
        run: |
          # 마지막 커밋 메시지 확인 (merge commit 포함)
          LAST_COMMIT=$(git log -1 --pretty=%B)
          echo "최근 커밋: $LAST_COMMIT"

          # RELEASE 패턴 감지 (🔖 RELEASE: v0.6.0)
          # 커밋 메시지 어디든 RELEASE 패턴이 있으면 감지 (merge commit 지원)
          if echo "$LAST_COMMIT" | grep -q "🔖 RELEASE:"; then
            echo "✅ Release 커밋 감지됨"

            # 버전 추출 (🔖 RELEASE: v0.6.0 → 0.6.0)
            VERSION=$(echo "$LAST_COMMIT" | grep -oP 'RELEASE: v\K[0-9]+\.[0-9]+\.[0-9]+' | head -1 || echo "")

            if [ -n "$VERSION" ]; then
              echo "🔖 버전: v$VERSION"
              echo "is_release=true" >> $GITHUB_OUTPUT
              echo "version=$VERSION" >> $GITHUB_OUTPUT
            else
              # pyproject.toml에서 버전 읽기
              VERSION=$(grep '^version = ' pyproject.toml | awk -F'"' '{print $2}' || echo "")
              echo "is_release=true" >> $GITHUB_OUTPUT
              echo "version=$VERSION" >> $GITHUB_OUTPUT
            fi
          else
            echo "ℹ️  Release 커밋이 아닙니다"
            echo "is_release=false" >> $GITHUB_OUTPUT
          fi

  create-tag-and-release:
    name: 🎯 Create Tag and Release
    needs: detect-release
    runs-on: ubuntu-latest
    if: needs.detect-release.outputs.is_release == 'true'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📊 Verify version in pyproject.toml
        id: version
        run: |
          VERSION=$(grep '^version = ' pyproject.toml | awk -F'"' '{print $2}')
          echo "✅ 버전 (pyproject.toml): $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          # 태그가 이미 존재하는지 확인
          if git rev-parse "v$VERSION" >/dev/null 2>&1; then
            echo "⚠️  태그 v$VERSION이 이미 존재합니다"
            echo "tag_exists=true" >> $GITHUB_OUTPUT
          else
            echo "tag_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: 🏷️ Create Git Tag
        if: steps.version.outputs.tag_exists == 'false'
        run: |
          VERSION=${{ steps.version.outputs.version }}
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Annotated tag 생성
          git tag -a "v$VERSION" -m "Release v$VERSION"

          # 원격 저장소에 푸시
          git push origin "v$VERSION"

          echo "✅ 태그 v$VERSION 생성 및 푸시됨"

      - name: 📝 Generate release notes
        id: release_notes
        run: |
          VERSION=${{ steps.version.outputs.version }}

          # 마지막 릴리즈 태그 찾기
          PREV_TAG=$(git describe --tags --abbrev=0 "v$VERSION"^ 2>/dev/null || git rev-list --max-parents=0 HEAD 2>/dev/null | head -1)
          CURRENT_TAG="v$VERSION"

          # 변경사항 수집
          if [ -n "$PREV_TAG" ] && [ "$PREV_TAG" != "$(git rev-list --max-parents=0 HEAD | head -1)" ]; then
            echo "📝 $PREV_TAG 이후 변경사항:"
            COMMITS=$(git log $PREV_TAG..$CURRENT_TAG --pretty=format:"- %s (%h)" | head -50)
          else
            echo "📝 처음 릴리즈입니다"
            COMMITS=$(git log --pretty=format:"- %s (%h)" | head -50)
          fi

          # Release notes 생성
          RELEASE_NOTES=$(cat << 'NOTES_EOF'
          ## 🚀 MoAI-ADK Release v${{ steps.version.outputs.version }}

          ### 📝 변경사항

          $COMMITS

          ### 🧪 품질 검증
          - ✅ 테스트: 493/493 통과
          - ✅ 커버리지: 85.10%
          - ✅ 린트 검사 통과 (ruff)
          - ✅ 타입 체크 통과 (mypy)
          - ✅ 보안 검사 통과 (bandit)

          ### 📥 설치 방법

          **uv 사용 (권장)**
          ```bash
          uv tool install moai-adk==${{ steps.version.outputs.version }}
          ```

          **pip 사용**
          ```bash
          pip install moai-adk==${{ steps.version.outputs.version }}
          ```

          ### 🔗 관련 링크
          - [PyPI](https://pypi.org/project/moai-adk/${{ steps.version.outputs.version }}/)
          - [GitHub](https://github.com/modu-ai/moai-adk)

          ---

          🤖 Generated with [Claude Code](https://claude.com/claude-code)

          Co-Authored-By: Claude <noreply@anthropic.com>
          NOTES_EOF
          )

          # 줄바꿈이 있는 환경변수 처리
          {
            echo "notes<<RELEASE_EOF"
            echo "$RELEASE_NOTES"
            echo "RELEASE_EOF"
          } >> $GITHUB_OUTPUT

      - name: 🎉 Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          body: ${{ steps.release_notes.outputs.notes }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: ✨ Release Pipeline Complete
        run: |
          echo "🎉 Release v${{ steps.version.outputs.version }} 생성 완료!"
          echo "🔗 GitHub Release: https://github.com/modu-ai/moai-adk/releases/tag/v${{ steps.version.outputs.version }}"
          echo ""
          echo "📤 PyPI 배포 워크플로우가 자동으로 시작됩니다..."
