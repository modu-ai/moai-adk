import{_ as a,c as i,o as n,a3 as t}from"./chunks/framework.L7k57l8l.js";const g=JSON.parse('{"title":"MoAI-ADK 소개","description":"TypeScript 기반 SPEC-First TDD 개발 도구","frontmatter":{"title":"MoAI-ADK 소개","description":"TypeScript 기반 SPEC-First TDD 개발 도구"},"headers":[],"relativePath":"introduction.md","filePath":"introduction.md"}'),l={name:"introduction.md"};function e(p,s,h,r,k,o){return n(),i("div",null,[...s[0]||(s[0]=[t(`<h1 id="moai-adk-소개" tabindex="-1">MoAI-ADK 소개 <a class="header-anchor" href="#moai-adk-소개" aria-label="Permalink to &quot;MoAI-ADK 소개&quot;">​</a></h1><blockquote><p><strong>명세 없이는 코드 없음. 테스트 없이는 구현 없음. 추적성 없이는 완성 없음.</strong></p></blockquote><p>MoAI-ADK는 Claude Code 환경에서 <strong>SPEC-First TDD 개발</strong>을 자동화하는 Agentic Development Kit입니다. TypeScript 기반으로 구축되어 TypeScript, Python, Java, Go, Rust, C++, C#, PHP 총 8개 언어를 지원하며, 일관된 개발 경험을 제공합니다.</p><h2 id="moai-adk란" tabindex="-1">MoAI-ADK란? <a class="header-anchor" href="#moai-adk란" aria-label="Permalink to &quot;MoAI-ADK란?&quot;">​</a></h2><h3 id="해결하는-문제" tabindex="-1">해결하는 문제 <a class="header-anchor" href="#해결하는-문제" aria-label="Permalink to &quot;해결하는 문제&quot;">​</a></h3><p>현대 소프트웨어 개발에는 다음과 같은 문제들이 존재합니다:</p><ol><li><strong>AI 페어 프로그래밍의 체계 부재</strong>: Claude Code 같은 AI 도구를 사용하지만 일관된 방법론이 없음</li><li><strong>언어별 도구 파편화</strong>: 각 언어마다 다른 개발 도구와 워크플로우</li><li><strong>추적성 관리의 복잡성</strong>: 요구사항부터 코드까지 연결 고리 관리 어려움</li><li><strong>문서-코드 불일치</strong>: 개발 진행에 따라 문서가 오래됨</li></ol><h3 id="moai-adk의-해결책" tabindex="-1">MoAI-ADK의 해결책 <a class="header-anchor" href="#moai-adk의-해결책" aria-label="Permalink to &quot;MoAI-ADK의 해결책&quot;">​</a></h3><p>MoAI-ADK는 <strong>SPEC-First TDD 자동화 개발 도구</strong>로 다음을 제공합니다:</p><ul><li><strong>3단계 워크플로우</strong>: SPEC 작성 → TDD 구현 → 문서 동기화</li><li><strong>8개 전문 에이전트</strong>: 각 단계를 자동화하는 AI 에이전트</li><li><strong>CODE-FIRST TAG 추적성</strong>: 요구사항부터 구현까지 추적성 제공</li><li><strong>8개 언어 지원</strong>: TypeScript, Python, Java, Go, Rust, C++, C#, PHP</li></ul><h2 id="핵심-개념-3가지" tabindex="-1">핵심 개념 3가지 <a class="header-anchor" href="#핵심-개념-3가지" aria-label="Permalink to &quot;핵심 개념 3가지&quot;">​</a></h2><h3 id="_1-spec-first-명세-없이는-코드-없음" tabindex="-1">1. SPEC-First: 명세 없이는 코드 없음 <a class="header-anchor" href="#_1-spec-first-명세-없이는-코드-없음" aria-label="Permalink to &quot;1. SPEC-First: 명세 없이는 코드 없음&quot;">​</a></h3><p><strong>EARS 방법론</strong>을 활용한 체계적인 요구사항 작성:</p><div class="language-markdown vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;">### Ubiquitous Requirements</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 시스템은 사용자 인증 기능을 제공해야 한다</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;">### Event-driven Requirements</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WHEN 사용자가 로그인하면, 시스템은 JWT 토큰을 발급해야 한다</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;">### State-driven Requirements</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WHILE 사용자가 인증된 상태일 때, 시스템은 보호된 리소스 접근을 허용해야 한다</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;">### Constraints</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 액세스 토큰 만료시간은 15분을 초과하지 않아야 한다</span></span></code></pre></div><p><strong>왜 SPEC-First인가?</strong></p><ul><li><strong>명확한 계약</strong>: 구현 전에 무엇을 만들지 정의</li><li><strong>커뮤니케이션 향상</strong>: 팀 간 공통 언어</li><li><strong>변경 추적</strong>: 요구사항 변경 이력 관리</li><li><strong>AI 친화적</strong>: Claude Code가 SPEC을 기반으로 정확히 구현</li></ul><h3 id="_2-tdd-first-테스트-없이는-구현-없음" tabindex="-1">2. TDD-First: 테스트 없이는 구현 없음 <a class="header-anchor" href="#_2-tdd-first-테스트-없이는-구현-없음" aria-label="Permalink to &quot;2. TDD-First: 테스트 없이는 구현 없음&quot;">​</a></h3><p><strong>Red-Green-Refactor 사이클</strong>:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// @TEST:AUTH-001: 유효한 사용자 인증 테스트</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">describe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;AuthService&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;should authenticate valid user&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // RED: 실패하는 테스트 작성</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> service</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AuthService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> service.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;user&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;pass&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    expect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result.token).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toBeDefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// GREEN: 최소한의 코드로 통과</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AuthService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">username</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">password</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 구현...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { token: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;jwt-token&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// REFACTOR: 품질 개선</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AuthService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> tokenService</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TokenService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">username</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">password</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 리팩토링된 구현...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>언어별 TDD 지원</strong>:</p><ul><li><strong>TypeScript</strong>: Vitest + strict typing</li><li><strong>Python</strong>: pytest + mypy</li><li><strong>Java</strong>: JUnit + Maven/Gradle</li><li><strong>Go</strong>: go test + table-driven tests</li><li><strong>Rust</strong>: cargo test + doc tests</li></ul><h3 id="_3-tag-first-추적성-없이는-완성-없음" tabindex="-1">3. TAG-First: 추적성 없이는 완성 없음 <a class="header-anchor" href="#_3-tag-first-추적성-없이는-완성-없음" aria-label="Permalink to &quot;3. TAG-First: 추적성 없이는 완성 없음&quot;">​</a></h3><p><strong>CODE-FIRST TAG 시스템</strong>으로 요구사항부터 코드까지 추적성 제공:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// @CODE:AUTH-001 | Chain: @SPEC:AUTH-001 →  → @CODE:AUTH-001 → @TEST:AUTH-001</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Related: @CODE:AUTH-001:API, @CODE:AUTH-001:UI, @CODE:AUTH-001:DATA</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @CODE:AUTH-001:API: 사용자 인증 API</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AuthService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   * @CODE:AUTH-001: 입력값 검증 및 인증 처리</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">username</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">password</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AuthResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 구현...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>TAG 체계</strong>:</p><ul><li><strong>TAG 흐름</strong>: @SPEC → @TEST → @CODE → @DOC (필수)</li><li><strong>@CODE 서브카테고리</strong>: @CODE 서브카테고리 (API, UI, DATA 등) (필수)</li></ul><p><strong>CODE-FIRST 철학</strong>:</p><ul><li>TAG의 진실은 오직 코드 자체에만 존재</li><li>중간 캐시 없이 ripgrep으로 직접 스캔</li><li>실시간 검증</li></ul><h2 id="아키텍처-다이어그램" tabindex="-1">아키텍처 다이어그램 <a class="header-anchor" href="#아키텍처-다이어그램" aria-label="Permalink to &quot;아키텍처 다이어그램&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>MoAI-ADK Architecture</span></span>
<span class="line"><span>┌─────────────────────────────────────────────────┐</span></span>
<span class="line"><span>│         TypeScript CLI &amp; Core Engine            │</span></span>
<span class="line"><span>│  ┌──────────┐ ┌──────────┐ ┌──────────┐       │</span></span>
<span class="line"><span>│  │   init   │ │  doctor  │ │  status  │  ...  │</span></span>
<span class="line"><span>│  └──────────┘ └──────────┘ └──────────┘       │</span></span>
<span class="line"><span>└─────────────────────────────────────────────────┘</span></span>
<span class="line"><span>                      │</span></span>
<span class="line"><span>                      ▼</span></span>
<span class="line"><span>┌─────────────────────────────────────────────────┐</span></span>
<span class="line"><span>│      Universal Language Support                 │</span></span>
<span class="line"><span>│  ┌──────────┐ ┌──────────┐ ┌──────────┐       │</span></span>
<span class="line"><span>│  │ TypeScript│ │  Python  │ │   Java   │  ...  │</span></span>
<span class="line"><span>│  └──────────┘ └──────────┘ └──────────┘       │</span></span>
<span class="line"><span>└─────────────────────────────────────────────────┘</span></span>
<span class="line"><span>                      │</span></span>
<span class="line"><span>                      ▼</span></span>
<span class="line"><span>┌─────────────────────────────────────────────────┐</span></span>
<span class="line"><span>│        Claude Code Integration                  │</span></span>
<span class="line"><span>│  ┌──────────┐ ┌──────────┐ ┌──────────┐       │</span></span>
<span class="line"><span>│  │  Agents  │ │ Commands │ │   Hooks  │       │</span></span>
<span class="line"><span>│  └──────────┘ └──────────┘ └──────────┘       │</span></span>
<span class="line"><span>└─────────────────────────────────────────────────┘</span></span></code></pre></div><h2 id="typescript-전환-spec-013" tabindex="-1">TypeScript 전환 (SPEC-013) <a class="header-anchor" href="#typescript-전환-spec-013" aria-label="Permalink to &quot;TypeScript 전환 (SPEC-013)&quot;">​</a></h2><h3 id="전환-전후-비교" tabindex="-1">전환 전후 비교 <a class="header-anchor" href="#전환-전후-비교" aria-label="Permalink to &quot;전환 전후 비교&quot;">​</a></h3><h4 id="before-python-기반" tabindex="-1">Before (Python 기반) <a class="header-anchor" href="#before-python-기반" aria-label="Permalink to &quot;Before (Python 기반)&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>복잡한 아키텍처:</span></span>
<span class="line"><span>MoAI-ADK (Python) ↔ TypeScript 브릿지 ↔ 사용자 프로젝트</span></span>
<span class="line"><span></span></span>
<span class="line"><span>- 15MB 패키지 크기</span></span>
<span class="line"><span>- 4.6초 빌드 시간</span></span>
<span class="line"><span>- Python + TypeScript 이중 의존성</span></span></code></pre></div><h4 id="after-typescript-기반" tabindex="-1">After (TypeScript 기반) <a class="header-anchor" href="#after-typescript-기반" aria-label="Permalink to &quot;After (TypeScript 기반)&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>단순한 아키텍처:</span></span>
<span class="line"><span>MoAI-ADK (TypeScript) → 언어별 TDD 도구 → 사용자 프로젝트</span></span>
<span class="line"><span></span></span>
<span class="line"><span>- 195KB 패키지 크기</span></span>
<span class="line"><span>- 182ms 빌드 시간</span></span>
<span class="line"><span>- Node.js 단일 런타임</span></span></code></pre></div><h2 id="주요-특징" tabindex="-1">주요 특징 <a class="header-anchor" href="#주요-특징" aria-label="Permalink to &quot;주요 특징&quot;">​</a></h2><h3 id="성능" tabindex="-1">성능 <a class="header-anchor" href="#성능" aria-label="Permalink to &quot;성능&quot;">​</a></h3><ul><li><strong>빌드 시간</strong>: 182ms (tsup 기반)</li><li><strong>패키지 크기</strong>: 195KB</li><li><strong>테스트</strong>: Vitest (56개 중 52개 통과)</li><li><strong>린터</strong>: Biome (ESLint+Prettier 통합)</li></ul><h3 id="trust-5원칙" tabindex="-1">TRUST 5원칙 <a class="header-anchor" href="#trust-5원칙" aria-label="Permalink to &quot;TRUST 5원칙&quot;">​</a></h3><ul><li><strong>T</strong> (Test First): TDD 엄격 적용</li><li><strong>R</strong> (Readable): SPEC 기반 가독성</li><li><strong>U</strong> (Unified): 언어별 일관된 구조</li><li><strong>S</strong> (Secured): 설계 시점 보안</li><li><strong>T</strong> (Trackable): CODE-FIRST TAG 추적성</li></ul><h3 id="언어-지원" tabindex="-1">언어 지원 <a class="header-anchor" href="#언어-지원" aria-label="Permalink to &quot;언어 지원&quot;">​</a></h3><ul><li><strong>8개 언어</strong>: TypeScript, Python, Java, Go, Rust, C++, C#, PHP</li><li>프로젝트 파일 분석 기반 언어 감지</li><li>언어별 최적 테스트 프레임워크 자동 추천</li></ul><h2 id="다음-단계" tabindex="-1">다음 단계 <a class="header-anchor" href="#다음-단계" aria-label="Permalink to &quot;다음 단계&quot;">​</a></h2><h3 id="시작하기" tabindex="-1">시작하기 <a class="header-anchor" href="#시작하기" aria-label="Permalink to &quot;시작하기&quot;">​</a></h3><ol><li><strong><a href="/getting-started/installation.html">설치</a></strong>: 시스템 요구사항 확인 및 설치</li><li><strong><a href="/getting-started/quick-start.html">빠른 시작</a></strong>: 5분 안에 첫 기능 구현</li><li><strong><a href="/getting-started/project-setup.html">프로젝트 초기화</a></strong>: 프로젝트 구조 이해</li></ol><h3 id="핵심-개념-학습" tabindex="-1">핵심 개념 학습 <a class="header-anchor" href="#핵심-개념-학습" aria-label="Permalink to &quot;핵심 개념 학습&quot;">​</a></h3><ol><li><strong><a href="/concepts/spec-first-tdd.html">SPEC-First TDD</a></strong>: 방법론 완전 가이드</li><li><strong><a href="/concepts/tag-system.html">TAG 시스템</a></strong>: CODE-FIRST 추적성 관리 방법</li><li><strong><a href="/concepts/workflow.html">3단계 워크플로우</a></strong>: 개발 사이클 이해</li><li><strong><a href="/concepts/trust-principles.html">TRUST 원칙</a></strong>: 품질 기준 학습</li></ol><h3 id="claude-code-통합" tabindex="-1">Claude Code 통합 <a class="header-anchor" href="#claude-code-통합" aria-label="Permalink to &quot;Claude Code 통합&quot;">​</a></h3><ol><li><strong><a href="/claude/agents.html">에이전트 가이드</a></strong>: 7개 전문 에이전트 활용</li><li><strong><a href="/claude/commands.html">워크플로우 명령어</a></strong>: 5개 핵심 명령어 사용</li><li><strong><a href="/claude/hooks.html">이벤트 훅</a></strong>: 8개 자동화 시스템 이해</li></ol><h2 id="참고-자료" tabindex="-1">참고 자료 <a class="header-anchor" href="#참고-자료" aria-label="Permalink to &quot;참고 자료&quot;">​</a></h2><ul><li><strong>GitHub</strong>: <a href="https://github.com/modu-ai/moai-adk" target="_blank" rel="noreferrer">MoAI-ADK Repository</a></li><li><strong>NPM</strong>: <a href="https://www.npmjs.com/package/moai-adk" target="_blank" rel="noreferrer">moai-adk</a></li><li><strong>커뮤니티</strong>: <a href="https://github.com/modu-ai/moai-adk/discussions" target="_blank" rel="noreferrer">GitHub Discussions</a></li></ul>`,52)])])}const c=a(l,[["render",e]]);export{g as __pageData,c as default};
