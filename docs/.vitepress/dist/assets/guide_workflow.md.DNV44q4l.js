import{_ as i,c as a,o as t,a3 as e}from"./chunks/framework.L7k57l8l.js";const r=JSON.parse('{"title":"MoAI-ADK 0→3 Workflow","description":"","frontmatter":{},"headers":[],"relativePath":"guide/workflow.md","filePath":"guide/workflow.md"}'),n={name:"guide/workflow.md"};function l(d,s,h,p,o,k){return t(),a("div",null,[...s[0]||(s[0]=[e(`<h1 id="moai-adk-0→3-workflow" tabindex="-1">MoAI-ADK 0→3 Workflow <a class="header-anchor" href="#moai-adk-0→3-workflow" aria-label="Permalink to &quot;MoAI-ADK 0→3 Workflow&quot;">​</a></h1><p>이 문서는 MoAI CLI와 Claude 명령( <code>/alfred:*</code> )으로 프로젝트를 세팅하고 SPEC→BUILD→SYNC 흐름을 빠르게 반복하기 위한 실전 지침입니다. 과장된 수치나 추상적인 설명은 제외하고, 실제로 따라 할 수 있는 명령과 산출물만 정리했습니다.</p><hr><h2 id="_0-프로젝트-기반-다지기" tabindex="-1">0. 프로젝트 기반 다지기 <a class="header-anchor" href="#_0-프로젝트-기반-다지기" aria-label="Permalink to &quot;0. 프로젝트 기반 다지기&quot;">​</a></h2><h3 id="_0-1-cli로-기본-환경-준비" tabindex="-1">0-1. CLI로 기본 환경 준비 <a class="header-anchor" href="#_0-1-cli로-기본-환경-준비" aria-label="Permalink to &quot;0-1. CLI로 기본 환경 준비&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 프로젝트 루트에서 실행</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">moai</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                # .moai, .claude, CLAUDE.md 생성</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">moai</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> doctor</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              # Node, Git, npm 등 필수 도구 점검</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">moai</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> status</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              # 현재 프로젝트가 MoAI 템플릿을 잘 갖췄는지 확인</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">moai</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --check</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 템플릿 업데이트 필요 여부만 확인</span></span></code></pre></div><p>실행 시 CLI는 다음과 같이 알려줍니다.</p><ul><li><code>moai doctor</code> → <code>🔍 Checking system requirements...</code> 후, 설치 여부와 버전 요구사항을 <code>✅</code>/<code>⚠️</code>/<code>❌</code>로 표시합니다.</li><li><code>moai status</code> → <code>📊 MoAI-ADK Project Status</code> 아래에서 <code>.moai</code>, <code>.claude</code>, <code>CLAUDE.md</code>, <code>.git</code> 존재 여부와 템플릿 버전을 출력합니다.</li><li><code>moai update</code> → 최신 버전이 있으면 <code>⚡ 최신 버전: v…</code>와 같이 알려 주고, <code>--no-backup</code>이 없으면 <code>.moai-backup/&lt;timestamp&gt;/</code>에 안전 복사본을 남깁니다.</li></ul><h3 id="_0-2-프로젝트-문서-정비-alfred-8-project" tabindex="-1">0-2. 프로젝트 문서 정비 (<code>/alfred:8-project</code>) <a class="header-anchor" href="#_0-2-프로젝트-문서-정비-alfred-8-project" aria-label="Permalink to &quot;0-2. 프로젝트 문서 정비 (\`/alfred:8-project\`)&quot;">​</a></h3><p>Claude 편집기에서 <code>/alfred:8-project</code>를 실행하면 <code>project-manager.md</code>가 product/structure/tech.md 초안을 작성합니다.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/alfred:8-project MyService</span></span></code></pre></div><ul><li>현재 디렉터리와 언어(예: <code>package.json</code> → TypeScript)를 분석합니다.</li><li><code>product.md</code>, <code>structure.md</code>, <code>tech.md</code>를 덮어쓰거나 보강하므로, 필요 시 Git 스테이지 후 실행하세요.</li><li>프롬프트 마지막에 생성/갱신 계획이 요약되며, 사용자가 “진행/중단”을 직접 선택합니다.</li></ul><hr><h2 id="_1-spec-단계-alfred-1-spec" tabindex="-1">1. SPEC 단계 (<code>/alfred:1-spec</code>) <a class="header-anchor" href="#_1-spec-단계-alfred-1-spec" aria-label="Permalink to &quot;1. SPEC 단계 (\`/alfred:1-spec\`)&quot;">​</a></h2><p><code>spec-builder.md</code>는 요구사항을 정리하여 <code>docs/specs/</code> 또는 <code>.moai/specs/</code> 등에 저장합니다.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/alfred:1-spec &quot;사용자 인증&quot;</span></span></code></pre></div><ul><li>질문에 답하면 EARS 형식으로 <code>Ubiquitous</code>, <code>Event-driven</code>, <code>State-driven</code>, <code>Constraints</code> 섹션을 채웁니다.</li><li>SPEC 파일 첫머리에는 TAG 블록을 직접 추가하세요. 예시:</li></ul><div class="language-markdown vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/**</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @SPEC:AUTH-001 | Title: 사용자 인증</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> */</span></span></code></pre></div><ul><li>SPEC ID는 <code>SPEC-&lt;TOPIC&gt;-NNN</code> 패턴으로 통일하면 <code>@TAG</code> 검색이 쉬워집니다.</li></ul><p>간단한 SPEC 예시:</p><div class="language-markdown vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;"># SPEC-AUTH-001 사용자 인증</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;">## Ubiquitous</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 시스템은 이메일/비밀번호 기반 로그인을 제공해야 한다.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;">## Event-driven</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WHEN 유효한 자격 증명으로 로그인하면 JWT 토큰을 발급한다.</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WHEN 토큰이 만료되면 401 응답을 반환한다.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;">## Constraints</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Access Token TTL: 15분.</span></span></code></pre></div><hr><h2 id="_2-build-단계-alfred-2-build" tabindex="-1">2. BUILD 단계 (<code>/alfred:2-build</code>) <a class="header-anchor" href="#_2-build-단계-alfred-2-build" aria-label="Permalink to &quot;2. BUILD 단계 (\`/alfred:2-build\`)&quot;">​</a></h2><p><code>code-builder.md</code>는 SPEC을 받아 테스트와 구현 골격을 생성합니다.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/alfred:2-build SPEC-AUTH-001</span></span></code></pre></div><p>실행 흐름:</p><ol><li><strong>RED</strong> – 실패하는 테스트 초안 작성.</li><li><strong>GREEN</strong> – 최소한의 코드로 테스트 통과.</li><li><strong>REFACTOR</strong> – 중복 제거와 이름 정리.</li></ol><p>TypeScript 예시:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// tests/auth/login.test.ts</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/** @TEST:AUTH-001 로그인 테스트 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">describe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;login&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  it</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;returns a token for valid credentials&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> authService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">login</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;user@example.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Pass1234!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    expect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result.accessToken).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toBeDefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// src/auth/service.ts</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/** @CODE:AUTH-001 로그인 서비스 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AuthService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> login</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">email</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">password</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assertInputs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(email, password);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.users.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">findByEmail</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(email.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toLowerCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.passwords.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">verify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(password, user.hash))) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Invalid credentials&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.tokens.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">issue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user.id);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>로컬 실행 시에는 일반적인 Node/Bun 테스트 도구를 그대로 사용합니다.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bun</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # bun 사용 시</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # npm 사용 시</span></span></code></pre></div><p>각 파일 상단에 <code>@TEST:*</code>, <code>@CODE:*</code> TAG를 남겨 3단계에서 쉽게 연결되도록 합니다.</p><hr><h2 id="_3-sync-단계-alfred-3-sync" tabindex="-1">3. SYNC 단계 (<code>/alfred:3-sync</code>) <a class="header-anchor" href="#_3-sync-단계-alfred-3-sync" aria-label="Permalink to &quot;3. SYNC 단계 (\`/alfred:3-sync\`)&quot;">​</a></h2><p><code>doc-syncer.md</code>는 코드와 문서를 스캔해 TAG 체인과 문서 상태를 확인합니다.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/alfred:3-sync</span></span></code></pre></div><p>실행 결과 예시:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>코드 스캔 중...</span></span>
<span class="line"><span>✅ SPEC-AUTH-001 @SPEC / @TEST / @CODE 연결 완료</span></span>
<span class="line"><span>📄 sync-report.md 갱신, docs/api/ 업데이트</span></span></code></pre></div><ul><li>누락된 TAG가 있으면 <code>❌</code>로 목록을 보여주며, 수정 후 다시 실행하면 됩니다.</li><li>동기화가 끝나면 <code>git status</code>로 변경 파일을 검토하고 커밋/PR을 진행합니다.</li></ul><hr><h2 id="cli-기본-명령-요약" tabindex="-1">CLI 기본 명령 요약 <a class="header-anchor" href="#cli-기본-명령-요약" aria-label="Permalink to &quot;CLI 기본 명령 요약&quot;">​</a></h2><table tabindex="0"><thead><tr><th>명령</th><th>용도</th><th>참고 출력</th></tr></thead><tbody><tr><td><code>moai init</code></td><td>MoAI 템플릿 설치</td><td><code>🚀 Initializing ...</code>, <code>.moai/config.json</code> 생성</td></tr><tr><td><code>moai doctor</code></td><td>도구/버전 확인</td><td><code>🔍 Checking system requirements...</code></td></tr><tr><td><code>moai status</code></td><td>프로젝트 상태 확인</td><td><code>.moai</code>, <code>.claude</code>, 템플릿 버전 요약</td></tr><tr><td><code>moai update</code></td><td>템플릿 갱신</td><td>최신 여부, 백업 경로 안내</td></tr><tr><td><code>moai restore &lt;backup&gt;</code></td><td>백업 복원</td><td>건너뛴 항목/복원 항목 표시</td></tr></tbody></table><hr><h2 id="claude-에이전트-한눈에-보기" tabindex="-1">Claude 에이전트 한눈에 보기 <a class="header-anchor" href="#claude-에이전트-한눈에-보기" aria-label="Permalink to &quot;Claude 에이전트 한눈에 보기&quot;">​</a></h2><table tabindex="0"><thead><tr><th>파일</th><th>역할 요약</th></tr></thead><tbody><tr><td><code>spec-builder.md</code></td><td>질문을 통해 SPEC 초안 작성</td></tr><tr><td><code>code-builder.md</code></td><td>테스트/코드 골격 작성, TDD 진행 가이드</td></tr><tr><td><code>doc-syncer.md</code></td><td>SYNC 단계 지원, TAG 검증 안내</td></tr><tr><td><code>project-manager.md</code></td><td><code>/alfred:8-project</code> 수행, project/*.md 유지</td></tr><tr><td><code>git-manager.md</code></td><td>Git 작업 체크리스트 안내</td></tr><tr><td><code>debug-helper.md</code></td><td>실패 로그 분석 도우미</td></tr><tr><td><code>tag-agent.md</code></td><td>@TAG 패턴 진단, 누락된 링크 제안</td></tr><tr><td><code>trust-checker.md</code></td><td>품질 점검 체크리스트</td></tr><tr><td><code>cc-manager.md</code></td><td>Claude 설정 관련 리마인더</td></tr></tbody></table><p>모든 에이전트 정의 파일은 <code>templates/.claude/agents/alfred/</code>에 있으며, 필요 시 내용을 읽고 조직 내부 규칙에 맞게 커스터마이즈할 수 있습니다.</p><hr><h2 id="claude-hooks" tabindex="-1">Claude Hooks <a class="header-anchor" href="#claude-hooks" aria-label="Permalink to &quot;Claude Hooks&quot;">​</a></h2><table tabindex="0"><thead><tr><th>파일</th><th>실행 시점</th><th>기능</th></tr></thead><tbody><tr><td><code>policy-block.cjs</code></td><td>Bash 도구 사용 전</td><td>위험 명령(<code>rm -rf /</code> 등) 차단</td></tr><tr><td><code>pre-write-guard.cjs</code></td><td>Write/Edit 실행 전</td><td><code>.moai/memory/</code> 등 민감 경로 보호</td></tr><tr><td><code>session-notice.cjs</code></td><td>세션 시작 시</td><td>프로젝트 상태 요약 출력</td></tr><tr><td><code>tag-enforcer.cjs</code></td><td>저장 전</td><td>TAG 블록 누락/형식 검사</td></tr></tbody></table><p>Hooks는 <code>.claude/hooks/alfred/</code>에 있으며 Node 환경에서 동작합니다. 필요 시 <code>node path/to/hook</code>으로 단독 실행해 동작을 테스트할 수 있습니다.</p><hr><h2 id="tag와-sync의-중요성" tabindex="-1">@TAG와 SYNC의 중요성 <a class="header-anchor" href="#tag와-sync의-중요성" aria-label="Permalink to &quot;@TAG와 SYNC의 중요성&quot;">​</a></h2><p>MoAI-ADK는 코드 자체를 단일 진실 소스로 사용합니다. 파일마다 다음과 같이 TAG를 남겨 추적성을 확보하십시오.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @SPEC:AUTH-001 | 로그인 요구사항</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @TEST:AUTH-001 | tests/auth/login.test.ts</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @CODE:AUTH-001 | src/auth/service.ts</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @DOC:AUTH-001  | docs/api/auth.md</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span></code></pre></div><ul><li><code>@SPEC</code> → 요구사항 문서</li><li><code>@TEST</code> → 자동/수동 테스트</li><li><code>@CODE</code> → 구현 파일</li><li><code>@DOC</code> → 사용자 문서</li></ul><p><code>/alfred:3-sync</code>는 이 네 가지가 모두 연결돼 있는지 확인합니다. 하나라도 빠지면 sync 보고서에서 <code>❌</code>로 표시되므로 즉시 보완하세요.</p><hr><h2 id="반복-루틴-체크리스트" tabindex="-1">반복 루틴 체크리스트 <a class="header-anchor" href="#반복-루틴-체크리스트" aria-label="Permalink to &quot;반복 루틴 체크리스트&quot;">​</a></h2><ol><li><code>moai status</code>로 상태 점검.</li><li><code>/alfred:8-project</code>로 project/*.md 최신화.</li><li><code>/alfred:1-spec</code> → <code>/alfred:2-build</code> → <code>/alfred:3-sync</code> 순서로 기능 개발.</li><li><code>npm test</code>/<code>bun test</code> 등 로컬 테스트 통과 여부 확인.</li><li><code>git status</code> 확인 후 커밋과 PR 생성.</li></ol><p>위 흐름을 반복하면 SPEC, 코드, 문서, 추적성이 항상 일치하는 상태를 유지할 수 있습니다.</p>`,60)])])}const g=i(n,[["render",l]]);export{r as __pageData,g as default};
