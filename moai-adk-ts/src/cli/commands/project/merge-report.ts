// @CODE:INIT-003:UI | SPEC: SPEC-INIT-003.md | TEST: __tests__/cli/commands/project/merge-report.test.ts
// Related: @CODE:INIT-003:MERGE, @SPEC:INIT-003

/**
 * @file Merge Report Generator - Human-readable merge summary
 * @author MoAI Team
 * @tags @CODE:INIT-003:UI
 */

import type { MergeReport } from './backup-merger.js';
import * as path from 'node:path';

/**
 * Generate human-readable markdown report from merge data
 *
 * **Report Structure**:
 * - Metadata: Timestamp, total files
 * - Summary: Counts and success rate
 * - File lists: Merged, skipped, errors
 * - Details: Merge strategy per file type
 *
 * **Use Cases**:
 * - Save to .moai/reports/init-merge-report-{timestamp}.md
 * - Display to user after merge
 * - Debug merge issues
 *
 * @param report - Merge report data from BackupMerger
 * @returns Markdown-formatted report
 *
 * @example
 * ```typescript
 * const report = merger.getReport();
 * const markdown = generateMergeReport(report);
 * await fs.writeFile('.moai/reports/merge-report.md', markdown);
 * ```
 */
export function generateMergeReport(report: MergeReport): string {
  const lines: string[] = [];

  // Header
  lines.push('# MoAI-ADK Init Merge Report\n');

  // Metadata
  const timestamp = new Date(report.timestamp);
  const dateStr = timestamp.toISOString().split('T')[0];
  const timeStr = timestamp.toTimeString().split(' ')[0];

  lines.push(`**Execution Time**: ${dateStr} ${timeStr}`);
  lines.push(`**Total Files Processed**: ${getTotalFiles(report)}\n`);

  // Summary
  lines.push('## Summary\n');

  const successRate = calculateSuccessRate(report);
  lines.push(`- **Merged**: ${report.merged.length} files`);
  lines.push(`- **Skipped**: ${report.skipped.length} files`);
  lines.push(`- **Errors**: ${report.errors.length} files`);
  lines.push(`- **Success Rate**: ${successRate}%\n`);

  // Merged files section
  if (report.merged.length > 0) {
    lines.push('## Merged Files\n');
    lines.push('Files successfully merged with backup priority:\n');

    for (const file of report.merged) {
      const strategy = getMergeStrategy(file);
      lines.push(`- \`${file}\` (${strategy})`);
    }

    lines.push('');
  }

  // Skipped files section
  if (report.skipped.length > 0) {
    lines.push('## Skipped Files\n');
    lines.push('Files skipped (no backup found):\n');

    for (const file of report.skipped) {
      lines.push(`- \`${file}\``);
    }

    lines.push('');
  }

  // Errors section
  if (report.errors.length > 0) {
    lines.push('## Errors\n');
    lines.push('Files with merge errors:\n');

    for (const { file, error } of report.errors) {
      lines.push(`- \`${file}\``);
      lines.push(`  - **Error**: ${error}`);
    }

    lines.push('');
  }

  // Footer
  lines.push('---\n');
  lines.push('_Generated by MoAI-ADK Backup Merger_');

  return lines.join('\n');
}

/**
 * Calculate total files processed
 * @internal
 */
function getTotalFiles(report: MergeReport): number {
  return report.merged.length + report.skipped.length + report.errors.length;
}

/**
 * Calculate success rate percentage
 * @internal
 */
function calculateSuccessRate(report: MergeReport): string {
  const total = report.merged.length + report.errors.length;

  if (total === 0) {
    return '100';
  }

  const rate = (report.merged.length / total) * 100;
  return rate % 1 === 0 ? rate.toString() : rate.toFixed(1);
}

/**
 * Determine merge strategy based on file extension
 * @internal
 */
function getMergeStrategy(filePath: string): string {
  const ext = path.extname(filePath).toLowerCase();

  if (ext === '.json') {
    return 'Deep merge';
  }

  if (ext === '.md') {
    return 'HISTORY accumulation';
  }

  if (ext === '.cjs' || ext === '.mjs' || filePath.includes('hooks/')) {
    return 'Version comparison';
  }

  return 'Template priority';
}
